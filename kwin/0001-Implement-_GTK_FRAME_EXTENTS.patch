diff -r -U3 kwin-5.17.2.orig/abstract_client.cpp kwin-5.17.2/abstract_client.cpp
--- kwin-5.17.2.orig/abstract_client.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/abstract_client.cpp	2019-11-09 15:40:02.197445510 +0300
@@ -1992,4 +1992,14 @@
     return true;
 }
 
+QMargins AbstractClient::borderMargins() const
+{
+    return QMargins(borderLeft(), borderTop(), borderRight(), borderBottom());
+}
+
+QMargins AbstractClient::contentMargins() const
+{
+    return QMargins();
+}
+
 }
diff -r -U3 kwin-5.17.2.orig/abstract_client.h kwin-5.17.2/abstract_client.h
--- kwin-5.17.2.orig/abstract_client.h	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/abstract_client.h	2019-11-09 15:40:02.199445499 +0300
@@ -834,6 +834,18 @@
      */
     virtual bool supportsWindowRules() const;
 
+    /**
+     * Returns decoration border margins.
+     **/
+    QMargins borderMargins() const;
+
+    /**
+     * Returns client content margins.
+     *
+     * Default implementation returns a margins object with all margins set to 0.
+     **/
+    virtual QMargins contentMargins() const;
+
 public Q_SLOTS:
     virtual void closeWindow() = 0;
 
diff -r -U3 kwin-5.17.2.orig/atoms.cpp kwin-5.17.2/atoms.cpp
--- kwin-5.17.2.orig/atoms.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/atoms.cpp	2019-11-09 15:40:02.199445499 +0300
@@ -64,7 +64,6 @@
     , kde_color_sheme(QByteArrayLiteral("_KDE_NET_WM_COLOR_SCHEME"))
     , kde_skip_close_animation(QByteArrayLiteral("_KDE_NET_WM_SKIP_CLOSE_ANIMATION"))
     , kde_screen_edge_show(QByteArrayLiteral("_KDE_NET_WM_SCREEN_EDGE_SHOW"))
-    , gtk_frame_extents(QByteArrayLiteral("_GTK_FRAME_EXTENTS"))
     , kwin_dbus_service(QByteArrayLiteral("_ORG_KDE_KWIN_DBUS_SERVICE"))
     , utf8_string(QByteArrayLiteral("UTF8_STRING"))
     , text(QByteArrayLiteral("TEXT"))
diff -r -U3 kwin-5.17.2.orig/atoms.h kwin-5.17.2/atoms.h
--- kwin-5.17.2.orig/atoms.h	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/atoms.h	2019-11-09 15:40:02.200445493 +0300
@@ -73,7 +73,6 @@
     Xcb::Atom kde_color_sheme;
     Xcb::Atom kde_skip_close_animation;
     Xcb::Atom kde_screen_edge_show;
-    Xcb::Atom gtk_frame_extents;
     Xcb::Atom kwin_dbus_service;
     Xcb::Atom utf8_string;
     Xcb::Atom text;
diff -r -U3 kwin-5.17.2.orig/client.cpp kwin-5.17.2/client.cpp
--- kwin-5.17.2.orig/client.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/client.cpp	2019-11-09 15:40:02.202445482 +0300
@@ -124,7 +124,6 @@
     , needsXWindowMove(false)
     , m_decoInputExtent()
     , m_focusOutTimer(nullptr)
-    , m_clientSideDecorated(false)
 {
     // TODO: Do all as initialization
     syncRequest.counter = syncRequest.alarm = XCB_NONE;
@@ -544,23 +543,6 @@
     info->setFrameExtents(strut);
 }
 
-Xcb::Property Client::fetchGtkFrameExtents() const
-{
-    return Xcb::Property(false, m_client, atoms->gtk_frame_extents, XCB_ATOM_CARDINAL, 0, 4);
-}
-
-void Client::readGtkFrameExtents(Xcb::Property &prop)
-{
-    m_clientSideDecorated = !prop.isNull() && prop->type != 0;
-    emit clientSideDecoratedChanged();
-}
-
-void Client::detectGtkFrameExtents()
-{
-    Xcb::Property prop = fetchGtkFrameExtents();
-    readGtkFrameExtents(prop);
-}
-
 /**
  * Resizes the decoration, and makes sure the decoration widget gets resize event
  * even if the size hasn't changed. This is needed to make sure the decoration
@@ -2125,5 +2107,24 @@
         addRepaintFull();
 }
 
+QMargins Client::contentMargins() const
+{
+    return m_margins;
+}
+
+void Client::setMargins(const NETStrut &strut)
+{
+    QMargins margins;
+    margins.setLeft(strut.left);
+    margins.setTop(strut.top);
+    margins.setBottom(strut.bottom);
+    margins.setRight(strut.right);
+
+    if (m_margins == margins)
+        return;
+
+    m_margins = margins;
+}
+
 } // namespace
 
diff -r -U3 kwin-5.17.2.orig/client.h kwin-5.17.2/client.h
--- kwin-5.17.2.orig/client.h	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/client.h	2019-11-09 15:43:55.168145815 +0300
@@ -80,11 +80,6 @@
      * Use with care!
      */
     Q_PROPERTY(bool blocksCompositing READ isBlockingCompositing WRITE setBlockingCompositing NOTIFY blockingCompositingChanged)
-    /**
-     * Whether the Client uses client side window decorations.
-     * Only GTK+ are detected.
-     */
-    Q_PROPERTY(bool clientSideDecorated READ isClientSideDecorated NOTIFY clientSideDecoratedChanged)
 public:
     explicit Client();
     xcb_window_t wrapperId() const;
@@ -314,6 +309,8 @@
     }
     void handleSync();
 
+    QMargins contentMargins() const override;
+
     static void cleanupX11();
 
 public Q_SLOTS:
@@ -413,6 +410,7 @@
     void setCaption(const QString& s, bool force = false);
     bool hasTransientInternal(const Client* c, bool indirect, ConstClientList& set) const;
     void setShortcutInternal() override;
+    void setMargins(const NETStrut &strut);
 
     void configureRequest(int value_mask, int rx, int ry, int rw, int rh, int gravity, bool from_tool);
     NETExtendedStrut strut() const;
@@ -435,9 +433,6 @@
 
     void embedClient(xcb_window_t w, xcb_visualid_t visualid, xcb_colormap_t colormap, uint8_t depth);
     void detectNoBorder();
-    Xcb::Property fetchGtkFrameExtents() const;
-    void readGtkFrameExtents(Xcb::Property &prop);
-    void detectGtkFrameExtents();
     void destroyDecoration() override;
     void updateFrameExtents();
 
@@ -543,11 +538,11 @@
 
     Xcb::Window m_decoInputExtent;
     QPoint input_offset;
+    QMargins m_margins;
 
     QTimer *m_focusOutTimer;
 
     QList<QMetaObject::Connection> m_connections;
-    bool m_clientSideDecorated;
 
     QMetaObject::Connection m_edgeRemoveConnection;
     QMetaObject::Connection m_edgeGeometryTrackingConnection;
@@ -558,11 +553,6 @@
     return m_wrapper;
 }
 
-inline bool Client::isClientSideDecorated() const
-{
-    return m_clientSideDecorated;
-}
-
 inline bool Client::groupTransient() const
 {
     return m_transientForId == rootWindow();
diff -r -U3 kwin-5.17.2.orig/events.cpp kwin-5.17.2/events.cpp
--- kwin-5.17.2.orig/events.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/events.cpp	2019-11-09 15:40:02.203445476 +0300
@@ -473,6 +473,9 @@
         if (dirtyProperties2 & NET::WM2DesktopFileName) {
             setDesktopFileName(QByteArray(info->desktopFileName()));
         }
+        if (dirtyProperties2 & NET::WM2GTKFrameExtents) {
+            setMargins(info->gtkFrameExtents());
+        }
     }
 
     const uint8_t eventType = e->response_type & ~0x80;
@@ -745,8 +748,6 @@
             updateColorScheme();
         else if (e->atom == atoms->kde_screen_edge_show)
             updateShowOnScreenEdge();
-        else if (e->atom == atoms->gtk_frame_extents)
-            detectGtkFrameExtents();
         else if (e->atom == atoms->kde_net_wm_appmenu_service_name)
             checkApplicationMenuServiceName();
         else if (e->atom == atoms->kde_net_wm_appmenu_object_path)
diff -r -U3 kwin-5.17.2.orig/geometry.cpp kwin-5.17.2/geometry.cpp
--- kwin-5.17.2.orig/geometry.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/geometry.cpp	2019-11-09 15:40:02.204445471 +0300
@@ -456,12 +456,14 @@
  */
 QPoint Workspace::adjustClientPosition(AbstractClient* c, QPoint pos, bool unrestricted, double snapAdjust)
 {
+    const QMargins margins = c->contentMargins();
+
     QSize borderSnapZone(options->borderSnapZone(), options->borderSnapZone());
     QRect maxRect;
     int guideMaximized = MaximizeRestore;
     if (c->maximizeMode() != MaximizeRestore) {
         maxRect = clientArea(MaximizeArea, pos + c->rect().center(), c->desktop());
-        QRect geo = c->geometry();
+        QRect geo = c->geometry() - margins;
         if (c->maximizeMode() & MaximizeHorizontal && (geo.x() == maxRect.left() || geo.right() == maxRect.right())) {
             guideMaximized |= MaximizeHorizontal;
             borderSnapZone.setWidth(qMax(borderSnapZone.width() + 2, maxRect.width() / 16));
@@ -483,10 +485,10 @@
         const int ymin = maxRect.top();
         const int ymax = maxRect.bottom() + 1;
 
-        const int cx(pos.x());
-        const int cy(pos.y());
-        const int cw(c->width());
-        const int ch(c->height());
+        const int cx(pos.x() + margins.left());
+        const int cy(pos.y() + margins.top());
+        const int cw(c->width() - (margins.left() + margins.right()));
+        const int ch(c->height() - (margins.top() + margins.bottom()));
         const int rx(cx + cw);
         const int ry(cy + ch);               //these don't change
 
@@ -555,10 +557,11 @@
                 if ((*l)->isDesktop() || (*l)->isSplash())
                     continue;
 
-                lx = (*l)->x();
-                ly = (*l)->y();
-                lrx = lx + (*l)->width();
-                lry = ly + (*l)->height();
+                const QRect adjustedGeometry = (*l)->geometry() - (*l)->contentMargins();
+                lx = adjustedGeometry.left();
+                ly = adjustedGeometry.top();
+                lrx = adjustedGeometry.right() + 1;
+                lry = adjustedGeometry.bottom() + 1;
 
                 if (!(guideMaximized & MaximizeHorizontal) &&
                     (((cy <= lry) && (cy  >= ly)) || ((ry >= ly) && (ry  <= lry)) || ((cy <= ly) && (ry >= lry)))) {
@@ -631,7 +634,7 @@
             }
         }
 
-        pos = QPoint(nx, ny);
+        pos = QPoint(nx - margins.left(), ny - margins.top());
     }
     return pos;
 }
@@ -650,10 +653,11 @@
         const int ymin = maxRect.top();
         const int ymax = maxRect.bottom();
 
-        const int cx(moveResizeGeom.left());
-        const int cy(moveResizeGeom.top());
-        const int rx(moveResizeGeom.right());
-        const int ry(moveResizeGeom.bottom());
+        const QRect adjustedGeometry = moveResizeGeom - c->contentMargins();
+        const int cx(adjustedGeometry.left());
+        const int cy(adjustedGeometry.top());
+        const int rx(adjustedGeometry.right());
+        const int ry(adjustedGeometry.bottom());
 
         int newcx(cx), newcy(cy);                         //buffers
         int newrx(rx), newry(ry);
@@ -741,10 +745,12 @@
                 if ((*l)->isOnDesktop(VirtualDesktopManager::self()->current()) &&
                         !(*l)->isMinimized()
                         && (*l) != c) {
-                    lx = (*l)->x() - 1;
-                    ly = (*l)->y() - 1;
-                    lrx = (*l)->x() + (*l)->width();
-                    lry = (*l)->y() + (*l)->height();
+
+                    const QRect contentGeometry = (*l)->geometry() - (*l)->contentMargins();
+                    lx = contentGeometry.left() - 1;
+                    ly = contentGeometry.top() - 1;
+                    lrx = contentGeometry.right() + 1;
+                    lry = contentGeometry.bottom() + 1;
 
 #define WITHIN_HEIGHT ((( newcy <= lry ) && ( newcy  >= ly  ))  || \
                        (( newry >= ly  ) && ( newry  <= lry ))  || \
@@ -870,7 +876,7 @@
         //    // 2) Snap to the horizontal and vertical center lines of the screen
         //    }
 
-        moveResizeGeom = QRect(QPoint(newcx, newcy), QPoint(newrx, newry));
+        moveResizeGeom = QRect(QPoint(newcx, newcy), QPoint(newrx, newry)) + c->contentMargins();
     }
     return moveResizeGeom;
 }
@@ -3150,10 +3156,15 @@
 void AbstractClient::setElectricBorderMaximizing(bool maximizing)
 {
     m_electricMaximizing = maximizing;
-    if (maximizing)
-        outline()->show(electricBorderMaximizeGeometry(Cursor::pos(), desktop()), moveResizeGeometry());
-    else
+    if (maximizing) {
+        QRect targetRect = electricBorderMaximizeGeometry(Cursor::pos(), desktop());
+        if (electricBorderMode() != QuickTileMode(QuickTileFlag::Maximize)) {
+            targetRect -= contentMargins();
+        }
+        outline()->show(targetRect, moveResizeGeometry());
+    } else {
         outline()->hide();
+    }
     elevate(maximizing);
 }
 
@@ -3176,6 +3187,9 @@
     else if (electricBorderMode() & QuickTileFlag::Bottom)
         ret.setTop(ret.bottom()-(ret.height()-ret.height()/2) + 1);
 
+    // Maybe introduce some flag to ignore content margins?
+    ret += contentMargins();
+
     return ret;
 }
 
diff -r -U3 kwin-5.17.2.orig/manage.cpp kwin-5.17.2/manage.cpp
--- kwin-5.17.2.orig/manage.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/manage.cpp	2019-11-09 15:40:02.204445471 +0300
@@ -95,11 +95,11 @@
         NET::WM2InitialMappingState |
         NET::WM2IconPixmap |
         NET::WM2OpaqueRegion |
-        NET::WM2DesktopFileName;
+        NET::WM2DesktopFileName |
+        NET::WM2GTKFrameExtents;
 
     auto wmClientLeaderCookie = fetchWmClientLeader();
     auto skipCloseAnimationCookie = fetchSkipCloseAnimation();
-    auto gtkFrameExtentsCookie = fetchGtkFrameExtents();
     auto showOnScreenEdgeCookie = fetchShowOnScreenEdge();
     auto colorSchemeCookie = fetchColorScheme();
     auto firstInTabBoxCookie = fetchFirstInTabBox();
@@ -138,7 +138,6 @@
     if (Xcb::Extensions::self()->isShapeAvailable())
         xcb_shape_select_input(connection(), window(), true);
     detectShape(window());
-    readGtkFrameExtents(gtkFrameExtentsCookie);
     detectNoBorder();
     fetchIconicName();
 
@@ -165,6 +164,8 @@
     setSkipSwitcher((info->state() & NET::SkipSwitcher) != 0);
     readFirstInTabBox(firstInTabBoxCookie);
 
+    setMargins(info->gtkFrameExtents());
+
     setupCompositing();
 
     KStartupInfoId asn_id;
diff -r -U3 kwin-5.17.2.orig/netinfo.cpp kwin-5.17.2/netinfo.cpp
--- kwin-5.17.2.orig/netinfo.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/netinfo.cpp	2019-11-09 15:40:02.205445465 +0300
@@ -110,7 +110,8 @@
         NET::WM2FullPlacement |
         NET::WM2FullscreenMonitors |
         NET::WM2KDEShadow |
-        NET::WM2OpaqueRegion;
+        NET::WM2OpaqueRegion |
+        NET::WM2GTKFrameExtents;
 #ifdef KWIN_BUILD_ACTIVITIES
         properties2 |= NET::WM2Activities;
 #endif
diff -r -U3 kwin-5.17.2.orig/placement.cpp kwin-5.17.2/placement.cpp
--- kwin-5.17.2.orig/placement.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/placement.cpp	2019-11-09 15:59:35.429897876 +0300
@@ -105,25 +105,34 @@
 
     if (options->borderSnapZone()) {
         // snap to titlebar / snap to window borders on inner screen edges
-        const QRect geo(c->geometry());
-        QPoint corner = geo.topLeft();
-        const QPoint cp = c->clientPos();
-        const QSize cs = geo.size() - c->clientSize();
-        AbstractClient::Position titlePos = c->titlebarPosition();
+        const QMargins borderMargins = c->borderMargins();
+        const QMargins contentMargins = c->contentMargins();
 
+        const QRect clientRect = c->geometry();
         const QRect fullRect = workspace()->clientArea(FullArea, c);
+
+        const AbstractClient::Position titlePos = c->titlebarPosition();
+
+        QPoint corner = c->pos();
+
         if (!(c->maximizeMode() & MaximizeHorizontal)) {
-            if (titlePos != AbstractClient::PositionRight && geo.right() == fullRect.right())
-                corner.rx() += cs.width() - cp.x();
-            if (titlePos != AbstractClient::PositionLeft && geo.x() == fullRect.x())
-                corner.rx() -= cp.x();
+            if (titlePos != AbstractClient::PositionRight && clientRect.right() == fullRect.right()) {
+                corner.rx() += borderMargins.right() + contentMargins.right();
+            }
+            if (titlePos != AbstractClient::PositionLeft && clientRect.left() == fullRect.left()) {
+                corner.rx() -= borderMargins.left() + contentMargins.left();
+            }
         }
+
         if (!(c->maximizeMode() & MaximizeVertical)) {
-            if (titlePos != AbstractClient::PositionBottom && geo.bottom() == fullRect.bottom())
-                corner.ry() += cs.height() - cp.y();
-            if (titlePos != AbstractClient::PositionTop && geo.y() == fullRect.y())
-                corner.ry() -= cp.y();
+            if (titlePos != AbstractClient::PositionBottom && clientRect.bottom() == fullRect.bottom()) {
+                corner.ry() += borderMargins.bottom() + contentMargins.bottom();
+            }
+            if (titlePos != AbstractClient::PositionTop && clientRect.top() == fullRect.top()) {
+                corner.ry() -= borderMargins.top() + contentMargins.top();
+            }
         }
+
         c->move(corner);
     }
 }
@@ -140,6 +149,10 @@
     static int py = 2 * step;
     int tx, ty;
 
+    const QMargins contentMargins = c->contentMargins();
+    const int clientWidth = c->width() - contentMargins.left() - contentMargins.right();
+    const int clientHeight = c->height() - contentMargins.top() - contentMargins.bottom();
+
     if (px < area.x()) {
         px = area.x();
     }
@@ -158,19 +171,19 @@
     }
     tx = px;
     ty = py;
-    if (tx + c->width() > area.right()) {
-        tx = area.right() - c->width();
+    if (tx + clientWidth > area.right()) {
+        tx = area.right() - clientWidth;
         if (tx < 0)
             tx = 0;
         px = area.x();
     }
-    if (ty + c->height() > area.bottom()) {
-        ty = area.bottom() - c->height();
+    if (ty + clientHeight > area.bottom()) {
+        ty = area.bottom() - clientHeight;
         if (ty < 0)
             ty = 0;
         py = area.y();
     }
-    c->move(tx, ty);
+    c->move(tx - contentMargins.left(), ty - contentMargins.top());
 }
 
 // TODO: one day, there'll be C++11 ...
@@ -227,8 +240,9 @@
     x_optimal = x; y_optimal = y;
 
     //client gabarit
-    int ch = c->height() - 1;
-    int cw = c->width()  - 1;
+    const QMargins contentMargins = c->contentMargins();
+    int ch = c->height() - contentMargins.top() - contentMargins.bottom() - 1;
+    int cw = c->width() - contentMargins.left() - contentMargins.right() - 1;
 
     bool first_pass = true; //CT lame flag. Don't like it. What else would do?
 
@@ -250,8 +264,10 @@
                 if (isIrrelevant(client, c, desktop)) {
                     continue;
                 }
-                xl = client->x();          yt = client->y();
-                xr = xl + client->width(); yb = yt + client->height();
+
+                const QRect adjustedGeometry = client->geometry() - client->contentMargins();
+                xl = adjustedGeometry.x();          yt = adjustedGeometry.y();
+                xr = xl + adjustedGeometry.width(); yb = yt + adjustedGeometry.height();
 
                 //if windows overlap, calc the overall overlapping
                 if ((cxl < xr) && (cxr > xl) &&
@@ -300,8 +316,9 @@
                     continue;
                 }
 
-                xl = client->x();          yt = client->y();
-                xr = xl + client->width(); yb = yt + client->height();
+                const QRect adjustedGeometry = client->geometry() - client->contentMargins();
+                xl = adjustedGeometry.x();          yt = adjustedGeometry.y();
+                xr = xl + adjustedGeometry.width(); yb = yt + adjustedGeometry.height();
 
                 // if not enough room above or under the current tested client
                 // determine the first non-overlapped x position
@@ -331,8 +348,9 @@
                     continue;
                 }
 
-                xl = client->x();          yt = client->y();
-                xr = xl + client->width(); yb = yt + client->height();
+                const QRect adjustedGeometry = client->geometry() - client->contentMargins();
+                xl = adjustedGeometry.x();          yt = adjustedGeometry.y();
+                xr = xl + adjustedGeometry.width(); yb = yt + adjustedGeometry.height();
 
                 // if not enough room to the left or right of the current tested client
                 // determine the first non-overlapped y position
@@ -350,7 +368,10 @@
     }
 
     // place the window
-    c->move(x_optimal, y_optimal);
+    const int leftOffset = contentMargins.left();
+    const int topOffset = contentMargins.top();
+
+    c->move(x_optimal - leftOffset, y_optimal - topOffset);
 
 }
 
@@ -400,8 +421,9 @@
     const int dn = c->desktop() == 0 || c->isOnAllDesktops() ? (VirtualDesktopManager::self()->current() - 1) : (c->desktop() - 1);
 
     // initialize often used vars: width and height of c; we gain speed
-    const int ch = c->height();
-    const int cw = c->width();
+    const QMargins margins = c->contentMargins();
+    const int ch = c->height() - margins.top() - margins.bottom();
+    const int cw = c->width() - margins.left() - margins.right();
     const int X = area.left();
     const int Y = area.top();
     const int H = area.height();
@@ -456,7 +478,7 @@
     }
 
     // place the window
-    c->move(QPoint(xp, yp));
+    c->move(QPoint(xp - margins.left(), yp - margins.top()));
 
     // new position
     cci[dn].pos = QPoint(xp + delta.x(), yp + delta.y());
@@ -469,8 +491,12 @@
 {
     Q_ASSERT(area.isValid());
 
-    const int xp = area.left() + (area.width() - c->width()) / 2;
-    const int yp = area.top() + (area.height() - c->height()) / 2;
+    const QMargins margins = c->contentMargins();
+    const int width = c->width() - margins.left() - margins.right();
+    const int height = c->height() - margins.top() - margins.bottom();
+
+    const int xp = area.left() + (area.width() -  width)  / 2;
+    const int yp = area.top()  + (area.height() - height) / 2;
 
     // place the window
     c->move(QPoint(xp, yp));
@@ -484,7 +510,10 @@
     Q_ASSERT(area.isValid());
 
     // get the maximum allowed windows space and desk's origin
-    c->move(area.topLeft());
+    const QMargins margins = c->contentMargins();
+    const QPoint offset = QPoint(margins.left(), margins.top());
+
+    c->move(area.topLeft() - offset);
 }
 
 void Placement::placeUtility(AbstractClient *c, const QRect &area, Policy /*next*/)
@@ -536,7 +565,7 @@
 {
     Q_ASSERT(area.isValid());
 
-    QRect geom = c->geometry();
+    QRect geom = c->geometry() - c->contentMargins();
     geom.moveCenter(Cursor::pos());
     c->move(geom.topLeft());
     c->keepInArea(area);   // make sure it's kept inside workarea
diff -r -U3 kwin-5.17.2.orig/useractions.cpp kwin-5.17.2/useractions.cpp
--- kwin-5.17.2.orig/useractions.cpp	2019-10-29 21:18:40.000000000 +0300
+++ kwin-5.17.2/useractions.cpp	2019-11-09 15:40:02.206445460 +0300
@@ -1599,6 +1599,8 @@
     if (!active_client)
         return;
     QPoint pos = active_client->pos() + active_client->clientPos();
+    pos.rx() += active_client->contentMargins().left();
+    pos.ry() += active_client->contentMargins().top();
     showWindowMenu(QRect(pos, pos), active_client);
 }
 
