From 83369d4fc59c5d3cbee1e5095f632491fb9f183a Mon Sep 17 00:00:00 2001
From: Vlad Zagorodniy <vladzzag@gmail.com>
Date: Sun, 30 Jun 2019 17:06:15 +0300
Subject: [PATCH] Implement _GTK_FRAME_EXTENTS

---
 abstract_client.cpp |  10 +++++
 abstract_client.h   |  12 ++++++
 atoms.cpp           |   1 -
 atoms.h             |   1 -
 client.cpp          |  37 ++++++++--------
 client.h            |  18 ++------
 events.cpp          |   5 ++-
 geometry.cpp        |  58 +++++++++++++++----------
 manage.cpp          |   7 ++--
 netinfo.cpp         |   3 +-
 placement.cpp       | 100 ++++++++++++++++++++++++++++----------------
 useractions.cpp     |   2 +
 12 files changed, 157 insertions(+), 97 deletions(-)

diff --git a/abstract_client.cpp b/abstract_client.cpp
index 12e030cd3..d2b91c441 100644
--- a/abstract_client.cpp
+++ b/abstract_client.cpp
@@ -2087,4 +2087,14 @@ bool AbstractClient::isInternal() const
     return false;
 }
 
+QMargins AbstractClient::borderMargins() const
+{
+    return QMargins(borderLeft(), borderTop(), borderRight(), borderBottom());
+}
+
+QMargins AbstractClient::contentMargins() const
+{
+    return QMargins();
+}
+
 }
diff --git a/abstract_client.h b/abstract_client.h
index 5173cbd72..3df077e22 100644
--- a/abstract_client.h
+++ b/abstract_client.h
@@ -825,6 +825,18 @@ public:
      **/
     virtual bool isInternal() const;
 
+    /**
+     * Returns decoration border margins.
+     **/
+    QMargins borderMargins() const;
+
+    /**
+     * Returns client content margins.
+     *
+     * Default implementation returns a margins object with all margins set to 0.
+     **/
+    virtual QMargins contentMargins() const;
+
 public Q_SLOTS:
     virtual void closeWindow() = 0;
 
diff --git a/atoms.cpp b/atoms.cpp
index 86540ab47..05123de18 100644
--- a/atoms.cpp
+++ b/atoms.cpp
@@ -65,7 +65,6 @@ Atoms::Atoms()
     , kde_color_sheme(QByteArrayLiteral("_KDE_NET_WM_COLOR_SCHEME"))
     , kde_skip_close_animation(QByteArrayLiteral("_KDE_NET_WM_SKIP_CLOSE_ANIMATION"))
     , kde_screen_edge_show(QByteArrayLiteral("_KDE_NET_WM_SCREEN_EDGE_SHOW"))
-    , gtk_frame_extents(QByteArrayLiteral("_GTK_FRAME_EXTENTS"))
     , kwin_dbus_service(QByteArrayLiteral("_ORG_KDE_KWIN_DBUS_SERVICE"))
     , utf8_string(QByteArrayLiteral("UTF8_STRING"))
     , text(QByteArrayLiteral("TEXT"))
diff --git a/atoms.h b/atoms.h
index 74e0fdc61..4d6e78c59 100644
--- a/atoms.h
+++ b/atoms.h
@@ -74,7 +74,6 @@ public:
     Xcb::Atom kde_color_sheme;
     Xcb::Atom kde_skip_close_animation;
     Xcb::Atom kde_screen_edge_show;
-    Xcb::Atom gtk_frame_extents;
     Xcb::Atom kwin_dbus_service;
     Xcb::Atom utf8_string;
     Xcb::Atom text;
diff --git a/client.cpp b/client.cpp
index 81cc59858..2fa1e8b00 100644
--- a/client.cpp
+++ b/client.cpp
@@ -125,7 +125,6 @@ Client::Client()
     , needsXWindowMove(false)
     , m_decoInputExtent()
     , m_focusOutTimer(nullptr)
-    , m_clientSideDecorated(false)
 {
     // TODO: Do all as initialization
     syncRequest.counter = syncRequest.alarm = XCB_NONE;
@@ -560,23 +559,6 @@ void Client::updateFrameExtents()
     info->setFrameExtents(strut);
 }
 
-Xcb::Property Client::fetchGtkFrameExtents() const
-{
-    return Xcb::Property(false, m_client, atoms->gtk_frame_extents, XCB_ATOM_CARDINAL, 0, 4);
-}
-
-void Client::readGtkFrameExtents(Xcb::Property &prop)
-{
-    m_clientSideDecorated = !prop.isNull() && prop->type != 0;
-    emit clientSideDecoratedChanged();
-}
-
-void Client::detectGtkFrameExtents()
-{
-    Xcb::Property prop = fetchGtkFrameExtents();
-    readGtkFrameExtents(prop);
-}
-
 /**
  * Resizes the decoration, and makes sure the decoration widget gets resize event
  * even if the size hasn't changed. This is needed to make sure the decoration
@@ -2153,5 +2135,24 @@ void Client::handleSync()
         addRepaintFull();
 }
 
+QMargins Client::contentMargins() const
+{
+    return m_margins;
+}
+
+void Client::setMargins(const NETStrut &strut)
+{
+    QMargins margins;
+    margins.setLeft(strut.left);
+    margins.setTop(strut.top);
+    margins.setBottom(strut.bottom);
+    margins.setRight(strut.right);
+
+    if (m_margins == margins)
+        return;
+
+    m_margins = margins;
+}
+
 } // namespace
 
diff --git a/client.h b/client.h
index 1af8df698..4562e196a 100644
--- a/client.h
+++ b/client.h
@@ -81,11 +81,6 @@ class KWIN_EXPORT Client
      * Use with care!
      **/
     Q_PROPERTY(bool blocksCompositing READ isBlockingCompositing WRITE setBlockingCompositing NOTIFY blockingCompositingChanged)
-    /**
-     * Whether the Client uses client side window decorations.
-     * Only GTK+ are detected.
-     **/
-    Q_PROPERTY(bool clientSideDecorated READ isClientSideDecorated NOTIFY clientSideDecoratedChanged)
 public:
     explicit Client();
     xcb_window_t wrapperId() const;
@@ -314,6 +309,8 @@ public:
     }
     void handleSync();
 
+    QMargins contentMargins() const override;
+
     static void cleanupX11();
 
 public Q_SLOTS:
@@ -418,6 +415,7 @@ private:
     void setCaption(const QString& s, bool force = false);
     bool hasTransientInternal(const Client* c, bool indirect, ConstClientList& set) const;
     void setShortcutInternal() override;
+    void setMargins(const NETStrut &strut);
 
     void configureRequest(int value_mask, int rx, int ry, int rw, int rh, int gravity, bool from_tool);
     NETExtendedStrut strut() const;
@@ -440,9 +438,6 @@ private:
 
     void embedClient(xcb_window_t w, xcb_visualid_t visualid, xcb_colormap_t colormap, uint8_t depth);
     void detectNoBorder();
-    Xcb::Property fetchGtkFrameExtents() const;
-    void readGtkFrameExtents(Xcb::Property &prop);
-    void detectGtkFrameExtents();
     void destroyDecoration() override;
     void updateFrameExtents();
 
@@ -549,11 +544,11 @@ private:
 
     Xcb::Window m_decoInputExtent;
     QPoint input_offset;
+    QMargins m_margins;
 
     QTimer *m_focusOutTimer;
 
     QList<QMetaObject::Connection> m_connections;
-    bool m_clientSideDecorated;
 
     QMetaObject::Connection m_edgeRemoveConnection;
     QMetaObject::Connection m_edgeGeometryTrackingConnection;
@@ -564,11 +559,6 @@ inline xcb_window_t Client::wrapperId() const
     return m_wrapper;
 }
 
-inline bool Client::isClientSideDecorated() const
-{
-    return m_clientSideDecorated;
-}
-
 inline bool Client::groupTransient() const
 {
     return m_transientForId == rootWindow();
diff --git a/events.cpp b/events.cpp
index df370cd9a..181836063 100644
--- a/events.cpp
+++ b/events.cpp
@@ -473,6 +473,9 @@ bool Client::windowEvent(xcb_generic_event_t *e)
         if (dirtyProperties2 & NET::WM2DesktopFileName) {
             setDesktopFileName(QByteArray(info->desktopFileName()));
         }
+        if (dirtyProperties2 & NET::WM2GTKFrameExtents) {
+            setMargins(info->gtkFrameExtents());
+        }
     }
 
     const uint8_t eventType = e->response_type & ~0x80;
@@ -745,8 +748,6 @@ void Client::propertyNotifyEvent(xcb_property_notify_event_t *e)
             updateColorScheme();
         else if (e->atom == atoms->kde_screen_edge_show)
             updateShowOnScreenEdge();
-        else if (e->atom == atoms->gtk_frame_extents)
-            detectGtkFrameExtents();
         else if (e->atom == atoms->kde_net_wm_appmenu_service_name)
             checkApplicationMenuServiceName();
         else if (e->atom == atoms->kde_net_wm_appmenu_object_path)
diff --git a/geometry.cpp b/geometry.cpp
index e971f9488..5771eab0e 100644
--- a/geometry.cpp
+++ b/geometry.cpp
@@ -456,12 +456,14 @@ int Workspace::oldDisplayHeight() const
  **/
 QPoint Workspace::adjustClientPosition(AbstractClient* c, QPoint pos, bool unrestricted, double snapAdjust)
 {
+    const QMargins margins = c->contentMargins();
+
     QSize borderSnapZone(options->borderSnapZone(), options->borderSnapZone());
     QRect maxRect;
     int guideMaximized = MaximizeRestore;
     if (c->maximizeMode() != MaximizeRestore) {
         maxRect = clientArea(MaximizeArea, pos + c->rect().center(), c->desktop());
-        QRect geo = c->geometry();
+        QRect geo = c->geometry() - margins;
         if (c->maximizeMode() & MaximizeHorizontal && (geo.x() == maxRect.left() || geo.right() == maxRect.right())) {
             guideMaximized |= MaximizeHorizontal;
             borderSnapZone.setWidth(qMax(borderSnapZone.width() + 2, maxRect.width() / 16));
@@ -483,10 +485,10 @@ QPoint Workspace::adjustClientPosition(AbstractClient* c, QPoint pos, bool unres
         const int ymin = maxRect.top();
         const int ymax = maxRect.bottom() + 1;
 
-        const int cx(pos.x());
-        const int cy(pos.y());
-        const int cw(c->width());
-        const int ch(c->height());
+        const int cx(pos.x() + margins.left());
+        const int cy(pos.y() + margins.top());
+        const int cw(c->width() - (margins.left() + margins.right()));
+        const int ch(c->height() - (margins.top() + margins.bottom()));
         const int rx(cx + cw);
         const int ry(cy + ch);               //these don't change
 
@@ -557,10 +559,11 @@ QPoint Workspace::adjustClientPosition(AbstractClient* c, QPoint pos, bool unres
                 if ((*l)->isDesktop() || (*l)->isSplash())
                     continue;
 
-                lx = (*l)->x();
-                ly = (*l)->y();
-                lrx = lx + (*l)->width();
-                lry = ly + (*l)->height();
+                const QRect adjustedGeometry = (*l)->geometry() - (*l)->contentMargins();
+                lx = adjustedGeometry.left();
+                ly = adjustedGeometry.top();
+                lrx = adjustedGeometry.right() + 1;
+                lry = adjustedGeometry.bottom() + 1;
 
                 if (!(guideMaximized & MaximizeHorizontal) &&
                     (((cy <= lry) && (cy  >= ly)) || ((ry >= ly) && (ry  <= lry)) || ((cy <= ly) && (ry >= lry)))) {
@@ -633,7 +636,7 @@ QPoint Workspace::adjustClientPosition(AbstractClient* c, QPoint pos, bool unres
             }
         }
 
-        pos = QPoint(nx, ny);
+        pos = QPoint(nx - margins.left(), ny - margins.top());
     }
     return pos;
 }
@@ -652,10 +655,11 @@ QRect Workspace::adjustClientSize(AbstractClient* c, QRect moveResizeGeom, int m
         const int ymin = maxRect.top();
         const int ymax = maxRect.bottom();
 
-        const int cx(moveResizeGeom.left());
-        const int cy(moveResizeGeom.top());
-        const int rx(moveResizeGeom.right());
-        const int ry(moveResizeGeom.bottom());
+        const QRect adjustedGeometry = moveResizeGeom - c->contentMargins();
+        const int cx(adjustedGeometry.left());
+        const int cy(adjustedGeometry.top());
+        const int rx(adjustedGeometry.right());
+        const int ry(adjustedGeometry.bottom());
 
         int newcx(cx), newcy(cy);                         //buffers
         int newrx(rx), newry(ry);
@@ -743,10 +747,12 @@ QRect Workspace::adjustClientSize(AbstractClient* c, QRect moveResizeGeom, int m
                 if ((*l)->isOnDesktop(VirtualDesktopManager::self()->current()) &&
                         !(*l)->isMinimized()
                         && (*l) != c) {
-                    lx = (*l)->x() - 1;
-                    ly = (*l)->y() - 1;
-                    lrx = (*l)->x() + (*l)->width();
-                    lry = (*l)->y() + (*l)->height();
+
+                    const QRect contentGeometry = (*l)->geometry() - (*l)->contentMargins();
+                    lx = contentGeometry.left() - 1;
+                    ly = contentGeometry.top() - 1;
+                    lrx = contentGeometry.right() + 1;
+                    lry = contentGeometry.bottom() + 1;
 
 #define WITHIN_HEIGHT ((( newcy <= lry ) && ( newcy  >= ly  ))  || \
                        (( newry >= ly  ) && ( newry  <= lry ))  || \
@@ -872,7 +878,7 @@ QRect Workspace::adjustClientSize(AbstractClient* c, QRect moveResizeGeom, int m
         //    // 2) Snap to the horizontal and vertical center lines of the screen
         //    }
 
-        moveResizeGeom = QRect(QPoint(newcx, newcy), QPoint(newrx, newry));
+        moveResizeGeom = QRect(QPoint(newcx, newcy), QPoint(newrx, newry)) + c->contentMargins();
     }
     return moveResizeGeom;
 }
@@ -3252,10 +3258,15 @@ void AbstractClient::setElectricBorderMode(QuickTileMode mode)
 void AbstractClient::setElectricBorderMaximizing(bool maximizing)
 {
     m_electricMaximizing = maximizing;
-    if (maximizing)
-        outline()->show(electricBorderMaximizeGeometry(Cursor::pos(), desktop()), moveResizeGeometry());
-    else
+    if (maximizing) {
+        QRect targetRect = electricBorderMaximizeGeometry(Cursor::pos(), desktop());
+        if (electricBorderMode() != QuickTileMode(QuickTileFlag::Maximize)) {
+            targetRect -= contentMargins();
+        }
+        outline()->show(targetRect, moveResizeGeometry());
+    } else {
         outline()->hide();
+    }
     elevate(maximizing);
 }
 
@@ -3278,6 +3289,9 @@ QRect AbstractClient::electricBorderMaximizeGeometry(QPoint pos, int desktop)
     else if (electricBorderMode() & QuickTileFlag::Bottom)
         ret.setTop(ret.bottom()-(ret.height()-ret.height()/2) + 1);
 
+    // Maybe introduce some flag to ignore content margins?
+    ret += contentMargins();
+
     return ret;
 }
 
diff --git a/manage.cpp b/manage.cpp
index 798ad61fa..2c410f44b 100644
--- a/manage.cpp
+++ b/manage.cpp
@@ -95,11 +95,11 @@ bool Client::manage(xcb_window_t w, bool isMapped)
         NET::WM2InitialMappingState |
         NET::WM2IconPixmap |
         NET::WM2OpaqueRegion |
-        NET::WM2DesktopFileName;
+        NET::WM2DesktopFileName |
+        NET::WM2GTKFrameExtents;
 
     auto wmClientLeaderCookie = fetchWmClientLeader();
     auto skipCloseAnimationCookie = fetchSkipCloseAnimation();
-    auto gtkFrameExtentsCookie = fetchGtkFrameExtents();
     auto showOnScreenEdgeCookie = fetchShowOnScreenEdge();
     auto colorSchemeCookie = fetchColorScheme();
     auto firstInTabBoxCookie = fetchFirstInTabBox();
@@ -138,7 +138,6 @@ bool Client::manage(xcb_window_t w, bool isMapped)
     if (Xcb::Extensions::self()->isShapeAvailable())
         xcb_shape_select_input(connection(), window(), true);
     detectShape(window());
-    readGtkFrameExtents(gtkFrameExtentsCookie);
     detectNoBorder();
     fetchIconicName();
 
@@ -165,6 +164,8 @@ bool Client::manage(xcb_window_t w, bool isMapped)
     setSkipSwitcher((info->state() & NET::SkipSwitcher) != 0);
     readFirstInTabBox(firstInTabBoxCookie);
 
+    setMargins(info->gtkFrameExtents());
+
     setupCompositing();
 
     KStartupInfoId asn_id;
diff --git a/netinfo.cpp b/netinfo.cpp
index d26061799..e2be725fe 100644
--- a/netinfo.cpp
+++ b/netinfo.cpp
@@ -110,7 +110,8 @@ RootInfo *RootInfo::create()
         NET::WM2FullPlacement |
         NET::WM2FullscreenMonitors |
         NET::WM2KDEShadow |
-        NET::WM2OpaqueRegion;
+        NET::WM2OpaqueRegion |
+        NET::WM2GTKFrameExtents;
 #ifdef KWIN_BUILD_ACTIVITIES
         properties2 |= NET::WM2Activities;
 #endif
diff --git a/placement.cpp b/placement.cpp
index 4decbaa61..d371052c4 100644
--- a/placement.cpp
+++ b/placement.cpp
@@ -107,25 +107,34 @@ void Placement::place(AbstractClient* c, QRect& area, Policy policy, Policy next
 
     if (options->borderSnapZone()) {
         // snap to titlebar / snap to window borders on inner screen edges
-        const QRect geo(c->geometry());
-        QPoint corner = geo.topLeft();
-        const QPoint cp = c->clientPos();
-        const QSize cs = geo.size() - c->clientSize();
-        AbstractClient::Position titlePos = c->titlebarPosition();
+        const QMargins borderMargins = c->borderMargins();
+        const QMargins contentMargins = c->contentMargins();
 
+        const QRect clientRect = c->geometry();
         const QRect fullRect = workspace()->clientArea(FullArea, c);
+
+        const AbstractClient::Position titlePos = c->titlebarPosition();
+
+        QPoint corner = c->pos();
+
         if (!(c->maximizeMode() & MaximizeHorizontal)) {
-            if (titlePos != AbstractClient::PositionRight && geo.right() == fullRect.right())
-                corner.rx() += cs.width() - cp.x();
-            if (titlePos != AbstractClient::PositionLeft && geo.x() == fullRect.x())
-                corner.rx() -= cp.x();
+            if (titlePos != AbstractClient::PositionRight && clientRect.right() == fullRect.right()) {
+                corner.rx() += borderMargins.right() + contentMargins.right();
+            }
+            if (titlePos != AbstractClient::PositionLeft && clientRect.left() == fullRect.left()) {
+                corner.rx() -= borderMargins.left() + contentMargins.left();
+            }
         }
+
         if (!(c->maximizeMode() & MaximizeVertical)) {
-            if (titlePos != AbstractClient::PositionBottom && geo.bottom() == fullRect.bottom())
-                corner.ry() += cs.height() - cp.y();
-            if (titlePos != AbstractClient::PositionTop && geo.y() == fullRect.y())
-                corner.ry() -= cp.y();
+            if (titlePos != AbstractClient::PositionBottom && clientRect.bottom() == fullRect.bottom()) {
+                corner.ry() += borderMargins.bottom() + contentMargins.bottom();
+            }
+            if (titlePos != AbstractClient::PositionTop && clientRect.top() == fullRect.top()) {
+                corner.ry() -= borderMargins.top() + contentMargins.top();
+            }
         }
+
         c->move(corner);
     }
 }
@@ -142,6 +151,10 @@ void Placement::placeAtRandom(AbstractClient* c, const QRect& area, Policy /*nex
 
     const QRect maxRect = checkArea(c, area);
 
+    const QMargins contentMargins = c->contentMargins();
+    const int clientWidth = c->width() - contentMargins.left() - contentMargins.right();
+    const int clientHeight = c->height() - contentMargins.top() - contentMargins.bottom();
+
     if (px < maxRect.x())
         px = maxRect.x();
     if (py < maxRect.y())
@@ -156,19 +169,20 @@ void Placement::placeAtRandom(AbstractClient* c, const QRect& area, Policy /*nex
         py =  maxRect.y() + step;
     tx = px;
     ty = py;
-    if (tx + c->width() > maxRect.right()) {
-        tx = maxRect.right() - c->width();
+    if (tx + clientWidth > maxRect.right()) {
+        tx = maxRect.right() - clientWidth;
         if (tx < 0)
             tx = 0;
         px =  maxRect.x();
     }
-    if (ty + c->height() > maxRect.bottom()) {
-        ty = maxRect.bottom() - c->height();
+    if (ty + clientHeight > maxRect.bottom()) {
+        ty = maxRect.bottom() - clientHeight;
         if (ty < 0)
             ty = 0;
         py =  maxRect.y();
     }
-    c->move(tx, ty);
+
+    c->move(tx - contentMargins.left(), ty - contentMargins.top());
 }
 
 // TODO: one day, there'll be C++11 ...
@@ -225,8 +239,9 @@ void Placement::placeSmart(AbstractClient* c, const QRect& area, Policy /*next*/
     x_optimal = x; y_optimal = y;
 
     //client gabarit
-    int ch = c->height() - 1;
-    int cw = c->width()  - 1;
+    const QMargins contentMargins = c->contentMargins();
+    int ch = c->height() - contentMargins.top() - contentMargins.bottom() - 1;
+    int cw = c->width() - contentMargins.left() - contentMargins.right() - 1;
 
     bool first_pass = true; //CT lame flag. Don't like it. What else would do?
 
@@ -248,8 +263,10 @@ void Placement::placeSmart(AbstractClient* c, const QRect& area, Policy /*next*/
                 if (isIrrelevant(client, c, desktop)) {
                     continue;
                 }
-                xl = client->x();          yt = client->y();
-                xr = xl + client->width(); yb = yt + client->height();
+
+                const QRect adjustedGeometry = client->geometry() - client->contentMargins();
+                xl = adjustedGeometry.x();          yt = adjustedGeometry.y();
+                xr = xl + adjustedGeometry.width(); yb = yt + adjustedGeometry.height();
 
                 //if windows overlap, calc the overall overlapping
                 if ((cxl < xr) && (cxr > xl) &&
@@ -298,8 +315,9 @@ void Placement::placeSmart(AbstractClient* c, const QRect& area, Policy /*next*/
                     continue;
                 }
 
-                xl = client->x();          yt = client->y();
-                xr = xl + client->width(); yb = yt + client->height();
+                const QRect adjustedGeometry = client->geometry() - client->contentMargins();
+                xl = adjustedGeometry.x();          yt = adjustedGeometry.y();
+                xr = xl + adjustedGeometry.width(); yb = yt + adjustedGeometry.height();
 
                 // if not enough room above or under the current tested client
                 // determine the first non-overlapped x position
@@ -329,8 +347,9 @@ void Placement::placeSmart(AbstractClient* c, const QRect& area, Policy /*next*/
                     continue;
                 }
 
-                xl = client->x();          yt = client->y();
-                xr = xl + client->width(); yb = yt + client->height();
+                const QRect adjustedGeometry = client->geometry() - client->contentMargins();
+                xl = adjustedGeometry.x();          yt = adjustedGeometry.y();
+                xr = xl + adjustedGeometry.width(); yb = yt + adjustedGeometry.height();
 
                 // if not enough room to the left or right of the current tested client
                 // determine the first non-overlapped y position
@@ -347,7 +366,10 @@ void Placement::placeSmart(AbstractClient* c, const QRect& area, Policy /*next*/
         y_optimal = maxRect.top();
 
     // place the window
-    c->move(x_optimal, y_optimal);
+    const int leftOffset = contentMargins.left();
+    const int topOffset = contentMargins.top();
+
+    c->move(x_optimal - leftOffset, y_optimal - topOffset);
 
 }
 
@@ -398,8 +420,9 @@ void Placement::placeCascaded(AbstractClient* c, QRect& area, Policy nextPlaceme
     QRect maxRect = checkArea(c, area);
 
     // initialize often used vars: width and height of c; we gain speed
-    const int ch = c->height();
-    const int cw = c->width();
+    const QMargins margins = c->contentMargins();
+    const int ch = c->height() - margins.top() - margins.bottom();
+    const int cw = c->width() - margins.left() - margins.right();
     const int X = maxRect.left();
     const int Y = maxRect.top();
     const int H = maxRect.height();
@@ -454,7 +477,7 @@ void Placement::placeCascaded(AbstractClient* c, QRect& area, Policy nextPlaceme
     }
 
     // place the window
-    c->move(QPoint(xp, yp));
+    c->move(QPoint(xp - margins.left(), yp - margins.top()));
 
     // new position
     cci[dn].pos = QPoint(xp + delta.x(), yp + delta.y());
@@ -465,12 +488,15 @@ void Placement::placeCascaded(AbstractClient* c, QRect& area, Policy nextPlaceme
  **/
 void Placement::placeCentered(AbstractClient* c, const QRect& area, Policy /*next*/)
 {
-
     // get the maximum allowed windows space and desk's origin
     const QRect maxRect = checkArea(c, area);
 
-    const int xp = maxRect.left() + (maxRect.width() -  c->width())  / 2;
-    const int yp = maxRect.top()  + (maxRect.height() - c->height()) / 2;
+    const QMargins margins = c->contentMargins();
+    const int width = c->width() - margins.left() - margins.right();
+    const int height = c->height() - margins.top() - margins.bottom();
+
+    const int xp = maxRect.left() + (maxRect.width() -  width)  / 2;
+    const int yp = maxRect.top()  + (maxRect.height() - height) / 2;
 
     // place the window
     c->move(QPoint(xp, yp));
@@ -482,7 +508,11 @@ void Placement::placeCentered(AbstractClient* c, const QRect& area, Policy /*nex
 void Placement::placeZeroCornered(AbstractClient* c, const QRect& area, Policy /*next*/)
 {
     // get the maximum allowed windows space and desk's origin
-    c->move(checkArea(c, area).topLeft());
+    const QRect placementArea = checkArea(c, area);
+    const QMargins margins = c->contentMargins();
+    const QPoint offset = QPoint(margins.left(), margins.top());
+
+    c->move(placementArea.topLeft() - offset);
 }
 
 void Placement::placeUtility(AbstractClient* c, QRect& area, Policy /*next*/)
@@ -531,7 +561,7 @@ void Placement::placeDialog(AbstractClient* c, QRect& area, Policy nextPlacement
 void Placement::placeUnderMouse(AbstractClient* c, QRect& area, Policy /*next*/)
 {
     area = checkArea(c, area);
-    QRect geom = c->geometry();
+    QRect geom = c->geometry() - c->contentMargins();
     geom.moveCenter(Cursor::pos());
     c->move(geom.topLeft());
     c->keepInArea(area);   // make sure it's kept inside workarea
diff --git a/useractions.cpp b/useractions.cpp
index 1455f75b9..3208e5c42 100644
--- a/useractions.cpp
+++ b/useractions.cpp
@@ -1773,6 +1773,8 @@ void Workspace::slotWindowOperations()
     if (!active_client)
         return;
     QPoint pos = active_client->pos() + active_client->clientPos();
+    pos.rx() += active_client->contentMargins().left();
+    pos.ry() += active_client->contentMargins().top();
     showWindowMenu(QRect(pos, pos), active_client);
 }
 
-- 
2.22.0

